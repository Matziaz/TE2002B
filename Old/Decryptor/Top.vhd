--------------------------------------------------------------------------------
--
-- This VHDL file was generated by EASE/HDL 7.2 Revision 6 from HDL Works B.V.
--
-- Ease library  : design
-- HDL library   : design
-- Host name     : calypso1
-- User name     : RickWare
-- Time stamp    : Thu May 21 09:14:53 2009
--
-- Designed by   : 
-- Company       : 
-- Project info  : 
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Object        : Entity design.Top
-- Last modified : Thu May 21 09:02:13 2009.
--------------------------------------------------------------------------------


library ieee;
use ieee.std_logic_1164.all;

entity Top is
  port(
    Clk        		: in     std_logic;
    CypherText 		: in     std_logic_vector(127 downto 0);
	 CipherKeyInput	: in     std_logic_vector(127 downto 0);
    PlainText  		: out    std_logic_vector(127 downto 0);
    Reset      		: in     std_logic;
	 
	 	 --Lineas de maquina de estado, para prueba.
	   
		oKeySel          : out    std_logic_vector(3 downto 0);
		oKeyEn           : out    std_logic;
		oAddRoundu0En    : out    std_logic;
		oSubBytesu1En    : out    std_logic;
      oShiftRowsu2En   : out    std_logic;
		oMixColumnsu3En  : out    std_logic;
		oAddRoundu4En    : out    std_logic;
      oSubBytesu5En    : out    std_logic;
		oShiftRowsu6En   : out    std_logic;
		oAddRoundu7En    : out    std_logic;
      oMuxSel          : out    std_logic);

end entity Top ;

--------------------------------------------------------------------------------
-- Object        : Architecture design.Top.structure
-- Last modified : Thu May 21 09:02:13 2009.
--------------------------------------------------------------------------------
architecture structure of Top is

  signal u1_TxtOut  :  std_logic_vector(127 downto 0);
  signal u2_TxtOut  :  std_logic_vector(127 downto 0);
  signal u3_TxtOut  :  std_logic_vector(127 downto 0);
  signal u6_TxtOut  :  std_logic_vector(127 downto 0);
  signal u5_TxtOut  :  std_logic_vector(127 downto 0);
  signal TxtOut     :  std_logic_vector(127 downto 0);
  signal u4_TxtOut  :  std_logic_vector(127 downto 0);
  signal MuxOut     :  std_logic_vector(127 downto 0);
  signal EnARK3     :  std_logic;
  signal EnISB2     :  std_logic;
  signal EnISR2     :  std_logic;
  signal EnMC       :  std_logic;
  signal Finish     :  std_logic;
  signal u6_Finish  :  std_logic;
  signal u5_Finish  :  std_logic;
  signal u7_Finish  :  std_logic;
  signal EnARK1     :  std_logic;
  signal EnKeySch   :  std_logic;
  signal EnARK2     :  std_logic;
  signal EnISB1     :  std_logic;
  signal u4_Finish  :  std_logic;
  signal u1_Finish  :  std_logic;
  signal EnISR1     :  std_logic;
  signal u2_Finish  :  std_logic;
  signal u0_Finish  :  std_logic;
  signal u9_Finish  :  std_logic;
  signal SelMux     :  std_logic;
  signal SelKey     :  std_logic_vector(3 downto 0);
  signal KeyOut     :  std_logic_vector(127 downto 0);
  signal u11_KeyOut :  std_logic_vector(127 downto 0);

  component AddRoundKey
    port(
      Clk    : in     std_logic;
      Enable : in     std_logic;
      Finish : out    std_logic;
      KeyIn  : in     std_logic_vector(127 downto 0);
      Rst    : in     std_logic;
      TxtIn  : in     std_logic_vector(127 downto 0);
      TxtOut : out    std_logic_vector(127 downto 0));

  end component AddRoundKey ;

  component Mux2to1
    port(
      InA    : in     std_logic_vector(127 downto 0);
      InB    : in     std_logic_vector(127 downto 0);
      MuxOut : out    std_logic_vector(127 downto 0);
      Sel    : in     std_logic);

  end component Mux2to1 ;

  component KeySchedule
    port(
      Clk    : in     std_logic;
      Enable : in     std_logic;
      Finish : out    std_logic;
      KeyIn  : in     std_logic_vector(127 downto 0);
      KeyOut : out    std_logic_vector(127 downto 0);
      Rst    : in     std_logic;
      Sel    : in     std_logic_vector(3 downto 0));

  end component KeySchedule ;

  component StateMach
    port(
      AddRoundu0En       : out    std_logic;
      AddRoundu0Fin      : in     std_logic;
      AddRoundu4En       : out    std_logic;
      AddRoundu4Fin      : in     std_logic;
      AddRoundu7En       : out    std_logic;
      AddRoundu7Fin      : in     std_logic;
      Clk                : in     std_logic;
      InvMixColumnsu3En  : out    std_logic;
      InvMixColumnsu3Fin : in     std_logic;
      InvShiftRowsu2En   : out    std_logic;
      InvShiftRowsu2Fin  : in     std_logic;
      InvShiftRowsu6En   : out    std_logic;
      InvShiftRowsu6Fin  : in     std_logic;
      InvSubBytesu1En    : out    std_logic;
      InvSubBytesu1Fin   : in     std_logic;
      InvSubBytesu5En    : out    std_logic;
      InvSubBytesu5Fin   : in     std_logic;
      KeyEn              : out    std_logic;
      KeyFin             : in     std_logic;
      KeySel             : out    std_logic_vector(3 downto 0);
      MuxSel             : out    std_logic;
      Rst                : in     std_logic);

  end component StateMach ;

  component InvSubBytes
    port(
      Clk    : in     std_logic;
      Enable : in     std_logic;
      Finish : out    std_logic;
      Rst    : in     std_logic;
      TxtIn  : in     std_logic_vector(127 downto 0);
      TxtOut : out    std_logic_vector(127 downto 0));

  end component InvSubBytes ;

  component InvShiftRows
    port(
      Clk    : in     std_logic;
      Enable : in     std_logic;
      Finish : out    std_logic;
      Rst    : in     std_logic;
      TxtIn  : in     std_logic_vector(127 downto 0);
      TxtOut : out    std_logic_vector(127 downto 0));

  end component InvShiftRows ;

  component InvMixColumns
    port(
      Clk    : in     std_logic;
      Enable : in     std_logic;
      Finish : out    std_logic;
      Rst    : in     std_logic;
      TxtIn  : in     std_logic_vector(127 downto 0);
      TxtOut : out    std_logic_vector(127 downto 0));

  end component InvMixColumns ;

--  component CypherKey
--    port(
--      KeyOut : out    std_logic_vector(127 downto 0));
--
--  end component CypherKey ;

begin
  --AES Decryption
  --Version 1.2
  --May 12th, 2009

  u0: AddRoundKey
    port map(
      Clk    => Clk,
      Enable => EnARK1,
      Finish => u0_Finish,
      KeyIn  => KeyOut,
      Rst    => Reset,
      TxtIn  => CypherText,
      TxtOut => TxtOut);

  u7: AddRoundKey
    port map(
      Clk    => Clk,
      Enable => EnARK3,
      Finish => u7_Finish,
      KeyIn  => KeyOut,
      Rst    => Reset,
      TxtIn  => u6_TxtOut,
      TxtOut => PlainText);

  u8: Mux2to1
    port map(
      InA    => TxtOut,
      InB    => u4_TxtOut,
      MuxOut => MuxOut,
      Sel    => SelMux);

  u9: KeySchedule
    port map(
      Clk    => Clk,
      Enable => EnKeySch,
      Finish => u9_Finish,
      KeyIn  => CipherKeyInput,
      KeyOut => KeyOut,
      Rst    => Reset,
      Sel    => SelKey);

  u10: StateMach
    port map(
      AddRoundu0En       => EnARK1,
      AddRoundu0Fin      => u0_Finish,
      AddRoundu4En       => EnARK2,
      AddRoundu4Fin      => u4_Finish,
      AddRoundu7En       => EnARK3,
      AddRoundu7Fin      => u7_Finish,
      Clk                => Clk,
      InvMixColumnsu3En  => EnMC,
      InvMixColumnsu3Fin => Finish,
      InvShiftRowsu2En   => EnISR1,
      InvShiftRowsu2Fin  => u2_Finish,
      InvShiftRowsu6En   => EnISR2,
      InvShiftRowsu6Fin  => u6_Finish,
      InvSubBytesu1En    => EnISB1,
      InvSubBytesu1Fin   => u1_Finish,
      InvSubBytesu5En    => EnISB2,
      InvSubBytesu5Fin   => u5_Finish,
      KeyEn              => EnKeySch,
      KeyFin             => u9_Finish,
      KeySel             => SelKey,
      MuxSel             => SelMux,
      Rst                => Reset);

  u1: InvSubBytes
    port map(
      Clk    => Clk,
      Enable => EnISB1,
      Finish => u1_Finish,
      Rst    => Reset,
      TxtIn  => u1_TxtOut,
      TxtOut => u2_TxtOut);

  u2: InvShiftRows
    port map(
      Clk    => Clk,
      Enable => EnISR1,
      Finish => u2_Finish,
      Rst    => Reset,
      TxtIn  => MuxOut,
      TxtOut => u1_TxtOut);

  u3: InvMixColumns
    port map(
      Clk    => Clk,
      Enable => EnMC,
      Finish => Finish,
      Rst    => Reset,
      TxtIn  => u3_TxtOut,
      TxtOut => u4_TxtOut);

  u4: AddRoundKey
    port map(
      Clk    => Clk,
      Enable => EnARK2,
      Finish => u4_Finish,
      KeyIn  => KeyOut,
      Rst    => Reset,
      TxtIn  => u2_TxtOut,
      TxtOut => u3_TxtOut);

  u5: InvSubBytes
    port map(
      Clk    => Clk,
      Enable => EnISB2,
      Finish => u5_Finish,
      Rst    => Reset,
      TxtIn  => u5_TxtOut,
      TxtOut => u6_TxtOut);

  u6: InvShiftRows
    port map(
      Clk    => Clk,
      Enable => EnISR2,
      Finish => u6_Finish,
      Rst    => Reset,
      TxtIn  => u4_TxtOut,
      TxtOut => u5_TxtOut);

--  u11: CypherKey
--    port map(
--      KeyOut => u11_KeyOut);
		oKeySel          <=	SelKey;
		oKeyEn           <= 	EnKeySch;
		oAddRoundu0En    <= 	EnARK1;
		oSubBytesu1En    <= 	EnISB1;
      oShiftRowsu2En   <=	EnISR1;
		oMixColumnsu3En  <= 	EnMC;
		oAddRoundu4En    <= 	EnARK2;
      oSubBytesu5En    <= 	EnISB2;
		oShiftRowsu6En   <=	EnISR2;
		oAddRoundu7En    <=	EnARK3;
      oMuxSel          <=	SelMux;
end architecture structure ; -- of Top
