--------------------------------------------------------------------------------
--
-- This VHDL file was generated by EASE/HDL 8.4 Revision 4 from HDL Works B.V.
--
-- Ease library  : design
-- HDL library   : design
-- Host name     : R2D2
-- User name     : Arturo
-- Time stamp    : Sun Apr 27 23:01:34 2025
--
-- Designed by   : 
-- Company       : 
-- Project info  : 
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Object        : Entity design.Top
-- Last modified : Sun Apr 27 22:59:33 2025
--------------------------------------------------------------------------------



library ieee;
use ieee.std_logic_1164.all;

entity Top is
  port (
    CipherText : in     std_logic_vector(127 downto 0);
    Clk        : in     std_logic;
    PlainText  : out    std_logic_vector(127 downto 0);
    Reset      : in     std_logic);
end entity Top;

--------------------------------------------------------------------------------
-- Object        : Architecture design.Top.structure
-- Last modified : Sun Apr 27 22:59:33 2025
--------------------------------------------------------------------------------

architecture structure of Top is

  signal u1_TxtOut     : std_logic_vector(127 downto 0);
  signal u2_TxtOut     : std_logic_vector(127 downto 0);
  signal u3_TxtOut     : std_logic_vector(127 downto 0);
  signal u6_TxtOut     : std_logic_vector(127 downto 0);
  signal u5_TxtOut     : std_logic_vector(127 downto 0);
  signal TxtOut        : std_logic_vector(127 downto 0);
  signal u4_TxtOut     : std_logic_vector(127 downto 0);
  signal MuxOut        : std_logic_vector(127 downto 0);
  signal KeySel        : std_logic_vector(3 downto 0);
  signal KeyEn         : std_logic;
  signal Finish        : std_logic;
  signal AddRoundEn    : std_logic;
  signal u0_Finish     : std_logic;
  signal SubBytesEn    : std_logic;
  signal u1_Finish     : std_logic;
  signal ShiftRowsEn   : std_logic;
  signal u2_Finish     : std_logic;
  signal MixColumnsEn  : std_logic;
  signal u3_Finish     : std_logic;
  signal AddRoundu4En  : std_logic;
  signal u4_Finish     : std_logic;
  signal SubBytesu5En  : std_logic;
  signal u5_Finish     : std_logic;
  signal ShiftRowsu6En : std_logic;
  signal u6_Finish     : std_logic;
  signal AddRoundu7En  : std_logic;
  signal u7_Finish     : std_logic;
  signal MuxSel        : std_logic;
  signal u11_KeyOut    : std_logic_vector(127 downto 0);
  signal KeyOut        : std_logic_vector(127 downto 0);

  component InvShiftRows
    port (
      Clk    : in     std_logic;
      Enable : in     std_logic;
      Finish : out    std_logic;
      Rst    : in     std_logic;
      TxtIn  : in     std_logic_vector(127 downto 0);
      TxtOut : out    std_logic_vector(127 downto 0));
  end component InvShiftRows;

  component InvSubBytes
    port (
      Clk    : in     std_logic;
      Enable : in     std_logic;
      Finish : out    std_logic;
      Rst    : in     std_logic;
      TxtIn  : in     std_logic_vector(127 downto 0);
      TxtOut : out    std_logic_vector(127 downto 0));
  end component InvSubBytes;

  component InvMixColumns
    port (
      Clk    : in     std_logic;
      Enable : in     std_logic;
      Finish : out    std_logic;
      Rst    : in     std_logic;
      TxtIn  : in     std_logic_vector(127 downto 0);
      TxtOut : out    std_logic_vector(127 downto 0));
  end component InvMixColumns;

  component AddRoundKey
    port (
      Clk    : in     std_logic;
      Enable : in     std_logic;
      Finish : out    std_logic;
      KeyIn  : in     std_logic_vector(127 downto 0);
      Rst    : in     std_logic;
      TxtIn  : in     std_logic_vector(127 downto 0);
      TxtOut : out    std_logic_vector(127 downto 0));
  end component AddRoundKey;

  component Mux2to1
    port (
      InA    : in     std_logic_vector(127 downto 0);
      InB    : in     std_logic_vector(127 downto 0);
      MuxOut : out    std_logic_vector(127 downto 0);
      Sel    : in     std_logic);
  end component Mux2to1;

  component KeySchedule
    port (
      Clk    : in     std_logic;
      Enable : in     std_logic;
      Finish : out    std_logic;
      KeyIn  : in     std_logic_vector(127 downto 0);
      KeyOut : out    std_logic_vector(127 downto 0);
      Rst    : in     std_logic;
      Sel    : in     std_logic_vector(3 downto 0));
  end component KeySchedule;

  component StateMach
    port (
      AddRoundKeyu3En    : out    std_logic;
      AddRoundKeyu3Fin   : in     std_logic;
      AddRoundu0En       : out    std_logic;
      AddRoundu0Fin      : in     std_logic;
      AddRoundu7En       : out    std_logic;
      AddRoundu7Fin      : in     std_logic;
      Clk                : in     std_logic;
      InvMixColumnsu4En  : out    std_logic;
      InvMixColumnsu4Fin : in     std_logic;
      InvShiftRowsu1En   : out    std_logic;
      InvShiftRowsu1Fin  : in     std_logic;
      InvShiftRowsu5En   : out    std_logic;
      InvShiftRowsu5Fin  : in     std_logic;
      InvSubBytesu2En    : out    std_logic;
      InvSubBytesu2Fin   : in     std_logic;
      InvSubBytesu6En    : out    std_logic;
      InvSubBytesu6Fin   : in     std_logic;
      KeyEn              : out    std_logic;
      KeyFin             : in     std_logic;
      KeySel             : out    std_logic_vector(3 downto 0);
      MuxSel             : out    std_logic;
      Rst                : in     std_logic);
  end component StateMach;

  component CyperKey
    port (
      KeyOut : out    std_logic_vector(127 downto 0));
  end component CyperKey;

begin

  u1: InvShiftRows
    port map(
      Clk    => Clk,
      Enable => SubBytesEn,
      Finish => u1_Finish,
      Rst    => Reset,
      TxtIn  => MuxOut,
      TxtOut => u1_TxtOut);

  u2: InvSubBytes
    port map(
      Clk    => Clk,
      Enable => ShiftRowsEn,
      Finish => u2_Finish,
      Rst    => Reset,
      TxtIn  => u1_TxtOut,
      TxtOut => u2_TxtOut);

  u4: InvMixColumns
    port map(
      Clk    => Clk,
      Enable => AddRoundu4En,
      Finish => u4_Finish,
      Rst    => Reset,
      TxtIn  => u3_TxtOut,
      TxtOut => u4_TxtOut);

  u3: AddRoundKey
    port map(
      Clk    => Clk,
      Enable => MixColumnsEn,
      Finish => u3_Finish,
      KeyIn  => KeyOut,
      Rst    => Reset,
      TxtIn  => u2_TxtOut,
      TxtOut => u3_TxtOut);

  u5: InvShiftRows
    port map(
      Clk    => Clk,
      Enable => SubBytesu5En,
      Finish => u5_Finish,
      Rst    => Reset,
      TxtIn  => u4_TxtOut,
      TxtOut => u5_TxtOut);

  u6: InvSubBytes
    port map(
      Clk    => Clk,
      Enable => ShiftRowsu6En,
      Finish => u6_Finish,
      Rst    => Reset,
      TxtIn  => u5_TxtOut,
      TxtOut => u6_TxtOut);

  u8: Mux2to1
    port map(
      InA    => TxtOut,
      InB    => u4_TxtOut,
      MuxOut => MuxOut,
      Sel    => MuxSel);

  u9: KeySchedule
    port map(
      Clk    => Clk,
      Enable => KeyEn,
      Finish => Finish,
      KeyIn  => u11_KeyOut,
      KeyOut => KeyOut,
      Rst    => Reset,
      Sel    => KeySel);

  u10: StateMach
    port map(
      AddRoundKeyu3En    => MixColumnsEn,
      AddRoundKeyu3Fin   => u3_Finish,
      AddRoundu0En       => AddRoundEn,
      AddRoundu0Fin      => u0_Finish,
      AddRoundu7En       => AddRoundu7En,
      AddRoundu7Fin      => u7_Finish,
      Clk                => Clk,
      InvMixColumnsu4En  => AddRoundu4En,
      InvMixColumnsu4Fin => u4_Finish,
      InvShiftRowsu1En   => SubBytesEn,
      InvShiftRowsu1Fin  => u1_Finish,
      InvShiftRowsu5En   => SubBytesu5En,
      InvShiftRowsu5Fin  => u5_Finish,
      InvSubBytesu2En    => ShiftRowsEn,
      InvSubBytesu2Fin   => u2_Finish,
      InvSubBytesu6En    => ShiftRowsu6En,
      InvSubBytesu6Fin   => u6_Finish,
      KeyEn              => KeyEn,
      KeyFin             => Finish,
      KeySel             => KeySel,
      MuxSel             => MuxSel,
      Rst                => Reset);

  u11: CyperKey
    port map(
      KeyOut => u11_KeyOut);

  u0: AddRoundKey
    port map(
      Clk    => Clk,
      Enable => AddRoundEn,
      Finish => u0_Finish,
      KeyIn  => KeyOut,
      Rst    => Reset,
      TxtIn  => CipherText,
      TxtOut => TxtOut);

  u7: AddRoundKey
    port map(
      Clk    => Clk,
      Enable => AddRoundu7En,
      Finish => u7_Finish,
      KeyIn  => KeyOut,
      Rst    => Reset,
      TxtIn  => u6_TxtOut,
      TxtOut => PlainText);
end architecture structure ; -- of Top

