--------------------------------------------------------------------------------
--
-- This VHDL file was generated by EASE/HDL 8.4 Revision 4 from HDL Works B.V.
--
-- Ease library  : design
-- HDL library   : design
-- Host name     : Laptop-Fer
-- User name     : ferna
-- Time stamp    : Mon Apr 07 09:58:08 2025
--
-- Designed by   : 
-- Company       : 
-- Project info  : 
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Object        : Entity design.StateMach
-- Last modified : Tue May 12 11:55:40 2009
--------------------------------------------------------------------------------


library ieee;
use ieee.std_logic_1164.all;

entity StateMach is
  port (
    KeyEn           : out std_logic;
    KeyFin          : in  std_logic;
    KeySel          : out std_logic_vector(3 downto 0);
    AddRoundEn      : out std_logic;
    AddRoundFin     : in  std_logic;
    InvShiftRowsEn  : out std_logic;
    InvShiftRowsFin : in  std_logic;
    InvSubBytesEn   : out std_logic;
    InvSubBytesFin  : in  std_logic;
    InvMixColumnsEn : out std_logic;
    InvMixColumnsFin: in  std_logic;
    Clk             : in  std_logic;
    Rst             : in  std_logic
  );
end entity StateMach;

architecture rtl of StateMach is

  type state_t is (
    IDLE,
    KEY_EXP,
    INIT_ADD,
    -- Rondas 1 a 9
    R1_SHIFT, R1_SUB, R1_ADD, R1_MIX,
    R2_SHIFT, R2_SUB, R2_ADD, R2_MIX,
    R3_SHIFT, R3_SUB, R3_ADD, R3_MIX,
    R4_SHIFT, R4_SUB, R4_ADD, R4_MIX,
    R5_SHIFT, R5_SUB, R5_ADD, R5_MIX,
    R6_SHIFT, R6_SUB, R6_ADD, R6_MIX,
    R7_SHIFT, R7_SUB, R7_ADD, R7_MIX,
    R8_SHIFT, R8_SUB, R8_ADD, R8_MIX,
    R9_SHIFT, R9_SUB, R9_ADD, R9_MIX,
    -- Final Round
    FINAL_SHIFT,
    FINAL_SUB,
    FINAL_ADD,
    DONE
  );
  signal state, next_state : state_t;

begin

  --------------------------------------------------------------------------
  -- Registro de estado
  --------------------------------------------------------------------------
  process(Clk, Rst)
  begin
    if Rst = '1' then
      state <= IDLE;
    elsif rising_edge(Clk) then
      state <= next_state;
    end if;
  end process;

  --------------------------------------------------------------------------
  -- Lógica del siguiente estado (combinacional)
  --------------------------------------------------------------------------
  process(state,
          KeyFin, AddRoundFin,
          InvShiftRowsFin, InvSubBytesFin, InvMixColumnsFin)
    variable v_next : state_t;
  begin
    -- Inicializo variable con el estado actual
    v_next := state;

    case state is
      when IDLE =>
        v_next := KEY_EXP;

      when KEY_EXP =>
        if KeyFin = '1' then
          v_next := INIT_ADD;
        end if;

      when INIT_ADD =>
        if AddRoundFin = '1' then
          v_next := R1_SHIFT;
        end if;

      -- Ronda 1
      when R1_SHIFT =>
        if InvShiftRowsFin = '1' then v_next := R1_SUB; end if;
      when R1_SUB =>
        if InvSubBytesFin = '1' then v_next := R1_ADD; end if;
      when R1_ADD =>
        if AddRoundFin = '1' then v_next := R1_MIX; end if;
      when R1_MIX =>
        if InvMixColumnsFin = '1' then v_next := R2_SHIFT; end if;

      -- Ronda 2
      when R2_SHIFT =>
        if InvShiftRowsFin = '1' then v_next := R2_SUB; end if;
      when R2_SUB =>
        if InvSubBytesFin = '1' then v_next := R2_ADD; end if;
      when R2_ADD =>
        if AddRoundFin = '1' then v_next := R2_MIX; end if;
      when R2_MIX =>
        if InvMixColumnsFin = '1' then v_next := R3_SHIFT; end if;

      -- Ronda 3
      when R3_SHIFT =>
        if InvShiftRowsFin = '1' then v_next := R3_SUB; end if;
      when R3_SUB =>
        if InvSubBytesFin = '1' then v_next := R3_ADD; end if;
      when R3_ADD =>
        if AddRoundFin = '1' then v_next := R3_MIX; end if;
      when R3_MIX =>
        if InvMixColumnsFin = '1' then v_next := R4_SHIFT; end if;

      -- Ronda 4
      when R4_SHIFT =>
        if InvShiftRowsFin = '1' then v_next := R4_SUB; end if;
      when R4_SUB =>
        if InvSubBytesFin = '1' then v_next := R4_ADD; end if;
      when R4_ADD =>
        if AddRoundFin = '1' then v_next := R4_MIX; end if;
      when R4_MIX =>
        if InvMixColumnsFin = '1' then v_next := R5_SHIFT; end if;

      -- Ronda 5
      when R5_SHIFT =>
        if InvShiftRowsFin = '1' then v_next := R5_SUB; end if;
      when R5_SUB =>
        if InvSubBytesFin = '1' then v_next := R5_ADD; end if;
      when R5_ADD =>
        if AddRoundFin = '1' then v_next := R5_MIX; end if;
      when R5_MIX =>
        if InvMixColumnsFin = '1' then v_next := R6_SHIFT; end if;

      -- Ronda 6
      when R6_SHIFT =>
        if InvShiftRowsFin = '1' then v_next := R6_SUB; end if;
      when R6_SUB =>
        if InvSubBytesFin = '1' then v_next := R6_ADD; end if;
      when R6_ADD =>
        if AddRoundFin = '1' then v_next := R6_MIX; end if;
      when R6_MIX =>
        if InvMixColumnsFin = '1' then v_next := R7_SHIFT; end if;

      -- Ronda 7
      when R7_SHIFT =>
        if InvShiftRowsFin = '1' then v_next := R7_SUB; end if;
      when R7_SUB =>
        if InvSubBytesFin = '1' then v_next := R7_ADD; end if;
      when R7_ADD =>
        if AddRoundFin = '1' then v_next := R7_MIX; end if;
      when R7_MIX =>
        if InvMixColumnsFin = '1' then v_next := R8_SHIFT; end if;

      -- Ronda 8
      when R8_SHIFT =>
        if InvShiftRowsFin = '1' then v_next := R8_SUB; end if;
      when R8_SUB =>
        if InvSubBytesFin = '1' then v_next := R8_ADD; end if;
      when R8_ADD =>
        if AddRoundFin = '1' then v_next := R8_MIX; end if;
      when R8_MIX =>
        if InvMixColumnsFin = '1' then v_next := R9_SHIFT; end if;

      -- Ronda 9
      when R9_SHIFT =>
        if InvShiftRowsFin = '1' then v_next := R9_SUB; end if;
      when R9_SUB =>
        if InvSubBytesFin = '1' then v_next := R9_ADD; end if;
      when R9_ADD =>
        if AddRoundFin = '1' then v_next := R9_MIX; end if;
      when R9_MIX =>
        if InvMixColumnsFin = '1' then v_next := FINAL_SHIFT; end if;

      -- Final Round (sin MixColumns)
      when FINAL_SHIFT =>
        if InvShiftRowsFin = '1' then v_next := FINAL_SUB; end if;
      when FINAL_SUB =>
        if InvSubBytesFin = '1' then v_next := FINAL_ADD; end if;
      when FINAL_ADD =>
        if AddRoundFin = '1' then v_next := DONE; end if;

      when DONE =>
        v_next := DONE;

      when others =>
        v_next := IDLE;
    end case;

    next_state <= v_next;
  end process;

  --------------------------------------------------------------------------
  -- Señales de control de módulos (outputs)
  --------------------------------------------------------------------------
  -- Habilita cada módulo en el estado correspondiente
  with state select
    KeyEn <= '1' when KEY_EXP,
             '0' when others;

  with state select
    AddRoundEn <= '1' when INIT_ADD |
                         R1_ADD | R2_ADD | R3_ADD | R4_ADD |
                         R5_ADD | R6_ADD | R7_ADD | R8_ADD | R9_ADD |
                         FINAL_ADD,
                 '0' when others;

  with state select
    InvShiftRowsEn <= '1' when R1_SHIFT | R2_SHIFT | R3_SHIFT | R4_SHIFT |
                                R5_SHIFT | R6_SHIFT | R7_SHIFT | R8_SHIFT |
                                R9_SHIFT | FINAL_SHIFT,
                     '0' when others;

  with state select
    InvSubBytesEn <= '1' when R1_SUB   | R2_SUB   | R3_SUB   | R4_SUB   |
                               R5_SUB   | R6_SUB   | R7_SUB   | R8_SUB   |
                               R9_SUB   | FINAL_SUB,
                    '0' when others;

  with state select
    InvMixColumnsEn <= '1' when R1_MIX | R2_MIX | R3_MIX | R4_MIX |
                                   R5_MIX | R6_MIX | R7_MIX | R8_MIX |
                                   R9_MIX,
                     '0' when others;

  --------------------------------------------------------------------------
  -- Selección de la clave de ronda (4 bits)
  --------------------------------------------------------------------------
  with state select
    KeySel <= "0000" when KEY_EXP | INIT_ADD,
              "0001" when R1_SHIFT | R1_SUB | R1_ADD | R1_MIX,
              "0010" when R2_SHIFT | R2_SUB | R2_ADD | R2_MIX,
              "0011" when R3_SHIFT | R3_SUB | R3_ADD | R3_MIX,
              "0100" when R4_SHIFT | R4_SUB | R4_ADD | R4_MIX,
              "0101" when R5_SHIFT | R5_SUB | R5_ADD | R5_MIX,
              "0110" when R6_SHIFT | R6_SUB | R6_ADD | R6_MIX,
              "0111" when R7_SHIFT | R7_SUB | R7_ADD | R7_MIX,
              "1000" when R8_SHIFT | R8_SUB | R8_ADD | R8_MIX,
              "1001" when R9_SHIFT | R9_SUB | R9_ADD | R9_MIX,
              "1010" when FINAL_SHIFT | FINAL_SUB | FINAL_ADD,
              "0000" when others;

end architecture rtl;
